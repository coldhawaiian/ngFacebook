{"name":"angular-facebook","tagline":"Facebook SDK wrapper for AngularJS Apps","body":"# angular-facebook\r\n\r\n**angular-facebook** is a Facebook SDK wrapper for AngularJS Apps. It aims to minimum configuration Facebook support to AngularJS applications.\r\n\r\n## Builds\r\n\r\nTo plug-and-play with **angular-facebook** just drop the latest build into your project and follow the usage instructions below.\r\n\r\n| Version                                                            | Readme                                |\r\n| ------------------------------------------------------------------ | ------------------------------------- |\r\n| [v0.0.1](https://github.com/ninjatronic/angular-facebook/blob/v0.0.1/version/v0.0.1/angular-facebook.min.js) | [Readme](https://github.com/ninjatronic/angular-facebook/blob/v0.0.1/README.md) |\r\n| [v0.0.2](https://github.com/ninjatronic/angular-facebook/blob/v0.0.2/version/v0.0.2/angular-facebook.min.js) | [Readme](https://github.com/ninjatronic/angular-facebook/blob/v0.0.2/README.md) |\r\n\r\n## Support\r\n\r\nCurrently supported features of the Facebook SDK:\r\n\r\n* User Authentication (login, logout etc)\r\n* Graph API\r\n* UI\r\n\r\n## Usage\r\n\r\n### Initialisation\r\n\r\nInclude the module in your app and initialise it during the application config block in the same manner you would initialise the FB SDK:\r\n\r\n```javascript\r\nangular\r\n    .module('my-angularjs-app', ['facebook'])\r\n    .config(['$facebookProvider', function($facebookProvider) {\r\n        $facebookProvider.init({\r\n            appId: 'myFbApplicationId',\r\n            channel: '//path/to/channel.html'\r\n        });\r\n    }]);\r\n```\r\n\r\n### Methods\r\n\r\nUse `$facebook` much as you would `FB`. Calls are the same as to the traditional `FB` object, except that they use promises instead of callbacks.\r\n\r\n```javascript\r\nangular\r\n    .module('my-angularjs-app')\r\n    .controller('my-controller', ['$facebook', function($facebook) {\r\n        // bind directly to the response promise\r\n        $scope.loginStatus = $facebook.getLoginStatus();\r\n        \r\n        // use the promise in code\r\n        $facebook.getLoginStatus().then(\r\n            function(response) {\r\n                $scope.loginResponse = response;\r\n            },\r\n            function(response) {\r\n                $scope.loginError = response.error;\r\n            }\r\n        );\r\n    }]);\r\n```\r\n\r\nThe one exception to this is `$facebook.getAuthResponse` which is synchronous.\r\n\r\n### Events\r\n\r\nEvents from the facebook SDK are then broadcast through the $rootScope of the application. The naming convention is to use the same event name as the Facebook SDK, prepended with 'facebook.' - so 'auth.authResponseChange' is broadcast as 'facebook.auth.authResponseChange. Consume these events as you would any other angular event:\r\n\r\n```javascript\r\nangular\r\n    .module('my-angularjs-app')\r\n    .controller('another-controller', ['$scope', '$facebook', function($scope, $facebook) {\r\n        $scope.$on('facebook.auth.authResponseChange', response) {\r\n            $scope.authStatus = response.status;\r\n        }\r\n    }]);\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}